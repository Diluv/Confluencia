plugins {
    id 'java'
    id 'maven'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.21.2'
}

version = "${project_version}" + getBuildNumber() + (isSnapshot() ? "-snapshot" : '')

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.13.0'
    implementation group: 'com.github.spotbugs', name: 'spotbugs', version: '4.0.0-beta5'

    implementation group: 'commons-io', name: 'commons-io', version: '2.6'

    implementation group: 'com.zaxxer', name: 'HikariCP', version: '3.4.2'
    implementation group: 'org.flywaydb', name: 'flyway-core', version: '6.1.4'
    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.5.3'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.5.2'

    testImplementation group: 'org.testcontainers', name: 'testcontainers', version: '1.12.4'
    testImplementation group: 'org.testcontainers', name: 'mariadb', version: '1.12.4'
    testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.12.4'
}

test {
    useJUnitPlatform()
}

task sourcesJar(type: Jar, dependsOn: classes) {
    description = 'Creates a JAR containing the source code.'
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description = 'Creates a JAR containing the JavaDocs.'
    from javadoc.destinationDir
    archiveClassifier = 'javadoc'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

jar {
    manifest {
        attributes([
            'Timestamp'               : System.currentTimeMillis(),
            'Specification-Title'     : project.archivesBaseName,
            'Specification-Vendor'    : project.vendor,
            'Specification-Version'   : project.version,
            'Implementation-Title'    : project.archivesBaseName,
            'Implementation-Version'  : project.version,
            'Implementation-Vendor'   : project.vendor,
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})"
        ])
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (System.getenv("GPG_KEYNAME")) {
        ext."signing.gnupg.keyName" = System.getenv("GPG_KEYNAME");
    }
}

signing {
    useGpgCmd()
    sign configurations.archives
}

tasks.withType(Sign) {
    onlyIf { !isSnapshot() }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                authentication(userName: System.getenv("OSSRH_USERNAME"), password: System.getenv("OSSRH_PASSWORD"))
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: System.getenv("OSSRH_USERNAME"), password: System.getenv("OSSRH_PASSWORD"))
            }

            pom.project {

                name 'Confluencia'
                packaging 'jar'
                url 'https://github.com/Diluv/Confluencia'

                scm {
                    connection 'scm:git:git://github.com/Diluv/Confluencia.git'
                    developerConnection 'scm:git:ssh://github.com/Diluv/Confluencia.git'
                    url 'https://github.com/Diluv/Confluencia'
                }

                licenses {
                    license {
                        name 'GNU Lesser General Public License v2.1'
                        url 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html'
                    }
                }

                developers {
                    developer {
                        id 'lclc98'
                        name 'lclc98'
                        email 'lclc98@lclc98.com'
                    }
                }
            }
        }
    }
}

nexusStaging {
    stagingProfileId = '1282c5e0d73bd2'
    username = System.getenv("OSSRH_USERNAME")
    password = System.getenv("OSSRH_PASSWORD")
}

static String getBuildNumber() {
    return System.getenv("BUILD_NUMBER") ?: "0"
}

static boolean isSnapshot() {
    String ref = System.getenv("GITHUB_REF");
    if (ref != null && ref.startsWith("refs/tags/v")) {
        return false
    }
    return true
}