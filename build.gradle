plugins {
    id 'java'
}

version = "${project_version}" + (isSnapshot() ? '+' + getBuildNumber() : '')
description = 'A library for Diluv\'s databases.'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.13.0'

    implementation group: 'com.zaxxer', name: 'HikariCP', version: '3.4.2'
    implementation group: 'org.flywaydb', name: 'flyway-core', version: '6.2.4'
    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.5.4'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.6.0'

    testImplementation group: 'org.testcontainers', name: 'testcontainers', version: '1.12.5'
    testImplementation group: 'org.testcontainers', name: 'mariadb', version: '1.12.5'
    testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.12.5'
}

test {
    useJUnitPlatform()
}

task sourcesJar(type: Jar, dependsOn: classes) {
    description = 'Creates a JAR containing the source code.'
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description = 'Creates a JAR containing the JavaDocs.'
    from javadoc.destinationDir
    archiveClassifier = 'javadoc'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

jar {
    manifest {
        attributes([
            'Timestamp'               : System.currentTimeMillis(),
            'Specification-Title'     : project.archivesBaseName,
            'Specification-Vendor'    : project.vendor,
            'Specification-Version'   : project.version,
            'Implementation-Title'    : project.archivesBaseName,
            'Implementation-Version'  : project.version,
            'Implementation-Vendor'   : project.vendor,
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})"
        ])
    }
}

static String getBuildNumber() {
    return System.getenv("BUILD_NUMBER") ?: "0"
}

static boolean isSnapshot() {
    String ref = System.getenv("GITHUB_REF");
    if (ref != null && ref.startsWith("refs/tags/v")) {
        return false
    }
    return true
}